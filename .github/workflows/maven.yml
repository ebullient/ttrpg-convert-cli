name: Java CI with Maven

on:
  push:
    branches: [ main ]
    paths:
      - .github/**
      - '**.xml'
      - 'src/**'
      - 'ide-config'
  pull_request:
    paths:
      - '**.xml'
      - 'src/**'
      - 'ide-config'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      current: ${{ steps.metadata.outputs.current }}
      next: ${{ steps.metadata.outputs.next }}
      snapshot: ${{ steps.metadata.outputs.snapshot }}
      artifact: ${{ steps.metadata.outputs.artifact }}
      group: ${{ steps.metadata.outputs.group }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          project:
            - '.github/project.yml'

    # Fetches all tags for the repo
    - name: Fetch tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'temurin'
        cache: maven

    - name: yq - portable yaml processor
      uses: mikefarah/yq@v4.27.3

    - name: Project metadata
      id: metadata
      run: |
        CURRENT=$(yq '.release.current-version' .github/project.yml )
        NEXT=$(yq '.release.next-version' .github/project.yml)
        SNAPSHOT=$(yq '.release.snapshot-version' .github/project.yml)
        ARTIFACT=$(yq '.jitpack.artifact' .github/project.yml)
        GROUP=$(yq '.jitpack.group' .github/project.yml)
        echo $CURRENT $NEXT $SNAPSHOT $GROUP $ARTIFACT

        if git rev-parse "refs/tags/$NEXT" 2>&1; then
          echo "Next tag exists"
        else
          echo "Tag does not exist yet"
        fi

        echo "current=${CURRENT}" >> $GITHUB_OUTPUT
        echo "next=${NEXT}" >> $GITHUB_OUTPUT
        echo "snapshot=${SNAPSHOT}" >> $GITHUB_OUTPUT
        echo "artifact=${ARTIFACT}" >> $GITHUB_OUTPUT
        echo "group=${GROUP}" >> $GITHUB_OUTPUT

    - name: Maven release
      if: ${{ github.ref == 'refs/heads/main' && steps.filter.outputs.project == 'true' }}
      id: mvn-build-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CURRENT: ${{ steps.metadata.outputs.current }}
        NEXT: ${{ steps.metadata.outputs.next }}
        SNAPSHOT: ${{ steps.metadata.outputs.snapshot }}
        ARTIFACT: ${{ steps.metadata.outputs.artifact }}
      run: |
        if git rev-parse "refs/tags/$NEXT" >/dev/null 2>&1; then
          echo "ðŸ”¹ Tagged release alreay exists"
          mvn -B formatter:validate install --file pom.xml
          echo "release=false" >> $GITHUB_OUTPUT
        else
          echo "ðŸ”¹ Creating new release"

          # Messy and not maven-y, but whatever.
          sed -i -r "s|/$CURRENT|/$NEXT|g" README.md
          sed -i -r "s|-$CURRENT|-$NEXT|g" README.md
          sed -i -r "s|<revision>.*</revision>|<revision>$NEXT</revision>|" pom.xml
          sed -i -r "s/  current-version: .*/  current-version: $NEXT/g" .github/project.yml

          ./mvnw -B --no-transfer-progress package

          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          git add README.md pom.xml .github/project.yml
          git commit -m "ðŸ”– $NEXT"
          git push

          git tag $NEXT
          git push --tags

          sed -i -r "s|<revision>.*</revision>|<revision>$SNAPSHOT</revision>|" pom.xml
          git add pom.xml
          git commit -m "ðŸ”§ Prepare for next release"
          git push
          echo "release=true" >> $GITHUB_OUTPUT
        fi

    - name: Build with Maven
      if: ${{ github.ref != 'refs/heads/main' || steps.filter.outputs.project == 'false' }}
      id: mvn-build
      run: |
        mvn -B formatter:validate install --file pom.xml

    # Temporarily disable native builds
    # - name: Build in native
    #  if: steps.filter.outputs.project == 'false'
    #  run: mvn -B -Dnative verify --file pom.xml

    # Create the release on github
    - name: Create Release
      if: ${{ steps.mvn-build-release.outputs.release == 'true' }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.metadata.outputs.next }}
        release_name: Release ${{ steps.metadata.outputs.next }}
        draft: false
        prerelease: false

    - name: Upload runner.jar
      if: ${{ steps.mvn-build-release.outputs.release == 'true' }}
      id: upload-jar
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/${{ steps.metadata.outputs.artifact }}-${{ steps.metadata.outputs.next }}-runner.jar
        asset_name: ${{ steps.metadata.outputs.artifact }}-${{ steps.metadata.outputs.next }}-runner.jar
        asset_content_type: application/java-archive

  update-snapshot:
    # Only run for successful build of the main branch
    needs: build
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Update tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SNAPSHOT: ${{needs.build.outputs.snapshot}}
        shell: bash
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          echo "Update tag for $SNAPSHOT"
          git push origin :refs/tags/$SNAPSHOT
          git tag -f $SNAPSHOT
          git push --tags

      - name: Delete Jitpack resource
        id: jitpack-antifreeze
        env:
          JITPACK_TOKEN: ${{ secrets.JITPACK_TOKEN }}
          SNAPSHOT: ${{ needs.build.outputs.snapshot }}
          ARTIFACT: ${{ needs.build.outputs.artifact }}
          GROUP:    ${{ needs.build.outputs.group }}
        shell: bash
        run: |
          echo "Delete JitPack artifacts for tag"
          curl https://jitpack.io/api/builds/$GROUP/$ARTIFACT
          curl -X "DELETE" -u${JITPACK_TOKEN} https://jitpack.io/api/builds/$GROUP/$ARTIFACT/$SNAPSHOT
          curl https://jitpack.io/api/builds/$GROUP/$ARTIFACT
