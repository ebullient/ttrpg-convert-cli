name: Create a release

on:
  workflow_dispatch:
    inputs:
      semver:
        description: "New version or major, minor, patch, project"
        default: "patch"
        required: true
        type: string
      retry:
        description: "Retry (use version from project.yml)"
        default: false
        required: true
        type: boolean
      dry_run:
        description: "Test capabilities, do not release"
        default: false
        required: true
        type: boolean

env:
  JAVA_VERSION: 11
  JAVA_DISTRO: temurin
  GRAALVM_VERSION: 22.3.0
  GH_BOT_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
  GH_BOT_NAME: "GitHub Action"
  JRELEASER_ARGS: '-PnativeImageDir=artifacts -PuberJarDir=artifacts -od target -sp linux-x86_64 -sp windows-x86_64 -sp osx-x86_64'

jobs:
  build_tag:
    runs-on: ubuntu-latest

    outputs:
      group: ${{ steps.metadata.outputs.group }}
      artifact: ${{ steps.metadata.outputs.artifact }}
      snapshot: ${{ steps.metadata.outputs.snapshot }}
      version: ${{ steps.metadata.outputs.next }}
      current: ${{ steps.metadata.outputs.current }}

    steps:
      - uses: actions/checkout@v3

      # Fetches all tags for the repo
      - name: Fetch tags
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: yq - portable yaml processor
        uses: mikefarah/yq@v4.30.2

      - name: Project metadata
        id: metadata
        env:
          INPUT: ${{ inputs.semver }}
          RETRY: ${{ inputs.retry }}
          DRY_RUN: ${{ inputs.dry_run }}
        run: .github/versions.sh

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}
          cache: maven

      - name: Update version
        if: inputs.dry_run == false
        id: update_version
        env:
          CURRENT: ${{ steps.metadata.outputs.current }}
          NEXT: ${{ steps.metadata.outputs.next }}
        run: .github/update_version.sh

      - name: Maven build
        id: mvn-build
        run: ./mvnw -B -ntp package -DskipFormat

      - name: Maven release
        id: mvn-release
        if: inputs.dry_run == false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEXT: ${{ steps.metadata.outputs.next }}
          SNAPSHOT: ${{ steps.metadata.outputs.snapshot }}
          RETRY: ${{ inputs.retry }}
        run: |
          echo "ðŸ”¹ Tagging new $NEXT release, retry=$RETRY"
          git config user.name ${{ env.GH_BOT_NAME }}
          git config user.email ${{ env.GH_BOT_EMAIL }}

          FLAG=
          if git rev-parse "refs/tags/$NEXT" > /dev/null 2>&1; then
            if [[ "$RETRY" == true ]]; then
              git push origin :refs/tags/$NEXT
              FLAG="-f "
            else
              echo "ðŸ›‘ Tag $NEXT already exists"
              exit 1
            fi
          else
            git add README.md pom.xml .github/project.yml
            git commit -m "ðŸ”– $NEXT"
            git push
          fi

          git tag $FLAG$NEXT
          git push --tags

      - name: Upload ${{ steps.metadata.outputs.artifact }}-${{ steps.metadata.outputs.next }}-runner.jar
        uses: actions/upload-artifact@v3
        id: upload-jar
        with:
          name: artifacts
          path: target/${{ steps.metadata.outputs.artifact }}-${{ steps.metadata.outputs.next }}-runner.jar

  native-binaries:
    name: Build ${{ matrix.os }} binary
    needs: build_tag
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v3

      - uses: graalvm/setup-graalvm@v1
        with:
          cache: "maven"
          components: "native-image"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          java-version: ${{ env.JAVA_VERSION }}
          version: ${{ env.GRAALVM_VERSION }}

      - name: Build ${{ matrix.os }} native binary
        id: mvn-native-build
        env:
          MAVEN_OPTS: "-Xmx1g"
        run: ./mvnw -B -ntp package -Dnative -DskipTests -DskipITs -DskipFormat

      - name: Assemble ${{ matrix.os }} archive
        uses: jreleaser/release-action@v1
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.build_tag.outputs.version }}
        with:
          arguments: assemble -s archive -scp -od target

      - name: Upload ${{ matrix.os }} archive
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: artifacts
          path: |
            target/jreleaser/assemble/native-archive/archive/*.tgz
            target/jreleaser/assemble/native-archive/archive/*.zip

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: native-image-${{ runner.os }}-logs
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties

  release:
    runs-on: ubuntu-latest
    needs: [build_tag, native-binaries]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: Release with JReleaser
        if: inputs.dry_run == true
        uses: jreleaser/release-action@v1
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_PROJECT_VERSION: ${{ needs.build_tag.outputs.version }}
        with:
          arguments: release ${JRELEASER_ARGS} --dry-run

      - name: Release with JReleaser
        if: inputs.dry_run == false
        uses: jreleaser/release-action@v1
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_PROJECT_VERSION: ${{ needs.build_tag.outputs.version }}
        with:
          arguments: release ${JRELEASER_ARGS}

      - name: Prepare for next release
        id: mvn-next-release
        if: inputs.dry_run == false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SNAPSHOT: ${{ needs.build_tag.outputs.snapshot }}
          RETRY: ${{ inputs.retry }}
        run: |
          echo "ðŸ”¹ Prepare for next release"
          git config user.name ${{ env.GH_BOT_NAME }}
          git config user.email ${{ env.GH_BOT_EMAIL }}

          sed -i -r "s|<revision>.*</revision>|<revision>$SNAPSHOT</revision>|" pom.xml
          git add pom.xml
          git commit -m "ðŸ”§ Prepare for next release"
          git push

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: release-logs
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties

  update-snapshot:
    if: github.ref == 'refs/heads/main'
    needs: release
    uses: ./.github/workflows/antifreeze.yml
    with:
      update-snapshot-tag: true
    secrets: inherit
